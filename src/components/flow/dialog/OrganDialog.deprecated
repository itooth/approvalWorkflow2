<template>
  <a-modal v-if="isOpened" v-model:visible="isOpened" @ok="onSave" @cancel="onCancel" titleAlign="start" :width="890">
    <template #title> 请选择组织成员 </template>
    <div class="organ-content-wrap">
      <div class="visibility-picker-left">
        <a-tabs position="top" @change="onTabChange" :activeKey="type">
          <a-tab-pane v-for="organ in types" :key="organ.code" :title="organ.name"> </a-tab-pane>
        </a-tabs>
        <a-input :style="{ width: '100%' }" v-model:model-value="name" placeholder="输入名称进行检索" allow-clear :max-length="16">
          <template #prefix><icon-search :size="18" /></template>
        </a-input>
        <div class="picker-type-content">
          <template v-if="type == 0">
            <a-checkbox v-for="i in filteredItem(depts)" :value="i.id" :model-value="i.checked" @change="onItemChoosed($event, i, type)">
              {{ i.name }}
            </a-checkbox>
          </template>
          <template v-else-if="type == 1">
            <a-checkbox v-for="i in filteredItem(roles)" :value="i.id" :model-value="i.checked" @change="onItemChoosed($event, i, type)">
              {{ i.name }}
            </a-checkbox>
          </template>
          <template v-else-if="type == 2">
            <a-checkbox v-for="i in filteredItem(users)" :value="i.id" :model-value="i.checked" @change="onItemChoosed($event, i, type)">
              {{ i.name }}
            </a-checkbox>
          </template>
        </div>
      </div>
      <div class="visibility-picker-right">
        <div class="choosed-items-box">
          <div class="item-select" v-for="i in selected0">
            <div class="text">{{ i.name }}</div>
            <div class="deleted">
              <a-link @click="onItemRemove(i)">
                <template #icon> <icon-close :size="12" /> </template>
              </a-link>
            </div>
          </div>
        </div>
      </div>
    </div>
  </a-modal>
</template>

<script setup>
import { useOrganStore } from "@/stores";
import { computed, onBeforeMount, ref, toRaw, watch } from "vue";

const { getDepts, getRoles, getUsers } = useOrganStore();

let props = defineProps({
  visible: { type: Boolean, default: false },
  selected: { type: Array, default: () => [] },
  organs: { type: Array, default: () => [0, 1, 2] },
});

let name = ref(""); // 搜索
let depts = ref([]);
let roles = ref([]);
let users = ref([]);
let type = ref(0); // 选择的标签，部门，角色还是用户
let types = computed(() => {
  return [
    { code: 0, name: "部门" },
    { code: 1, name: "角色" },
    { code: 2, name: "用户" },
  ].filter((i) => props.organs.includes(i.code));
});

let selected0 = ref([]); // 组件的选中的选项
let emits = defineEmits(["update:visible", "update:selected"]);

const filteredItem = (items) => {
  return (items || []).filter((item) => item.name.includes(name.value));
};

let isOpened = computed({
  get: () => props.visible,
  set: (val) => emits("update:visible", val),
});

// 切换tab页
const onTabChange = (val) => (type.value = val);
// 选中
const onItemChoosed = (checked, i, type) => {
  if (checked) {
    i.checked = true;
    selected0.value.push({
      id: i.id,
      name: i.name,
      type: type,
    });
  }
};
// 删除选中
const onItemRemove = (item) => {
  let idx = -1;
  for (let i = 0; i < selected0.value.length; i++) {
    let e = selected0.value[i];
    if (e.type == item.type && e.id == item.id) {
      idx = i;
      break;
    }
  }
  if (idx != -1) {
    selected0.value.splice(idx, 1);
    const { type } = item;
    if (type == 0) {
      depts.value.forEach((i) => {
        if (i.id == item.id) i.checked = false;
      });
    } else if (type == 1) {
      roles.value.forEach((i) => {
        if (i.id == item.id) i.checked = false;
      });
    } else if (type == 2) {
      users.value.forEach((i) => {
        if (i.id == item.id) i.checked = false;
      });
    }
  }
};

// 重置发起人选项
const initSelected = () => {
  // 全部值
  depts.value = getDepts();
  roles.value = getRoles();
  users.value = getUsers();

  // 选中的值
  selected0.value = JSON.parse(JSON.stringify(toRaw(props.selected)));
  console.log("选中的值：", selected0.value);

  // 设置一下选中的值
  let ids = selected0.value.filter((i) => i.type == 0).map((i) => i.id);
  depts.value.forEach((i) => (i.checked = ids.includes(i.id)));
  ids = selected0.value.filter((i) => i.type == 1).map((i) => i.id);
  roles.value.forEach((i) => (i.checked = ids.includes(i.id)));
  ids = selected0.value.filter((i) => i.type == 2).map((i) => i.id);
  users.value.forEach((i) => (i.checked = ids.includes(i.id)));
};

// 控制弹窗
const onSave = () => {
  isOpened.value = false;
  emits("update:selected", selected0.value);
};
const onCancel = () => {
  isOpened.value = false;
};

watch(
  () => props.visible,
  (nv) => {
    if (nv) {
      initSelected(); // 初始化选项
      type.value = types.value[0].code;
    }
  },
  { deep: true, immediate: true }
);

onBeforeMount(() => {});
</script>

<style lang="less">
.organ-content-wrap {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  height: 440px;
  border: 1px solid #e4e5e7;
  border-radius: 4px;

  .visibility-picker-left,
  .visibility-picker-right {
    flex: 1;
  }

  .visibility-picker-left {
    padding: 8px 16px 0;
    overflow: hidden;
    border-right: 1px solid #e4e5e7;

    .picker-type-content {
      margin-top: 10px;
      height: calc(100% - 110px);
      overflow-y: auto;
      display: flex;
      flex-direction: column;

      .arco-checkbox {
        min-height: 28px;
      }
    }
  }

  .visibility-picker-right {
    overflow-y: auto;
    padding: 10px;

    .item-select {
      display: flex;
      flex-direction: row;
      justify-content: center;
      height: 32px;
      align-items: center;
      padding: 0 8px 0 16px;
      user-select: none;
      border-radius: 4px;

      &:hover {
        background-color: #f7f9fc;
      }

      .text {
        flex: 1;
      }

      .deleted {
        .arco-link-icon {
          color: #8f959e;
          margin-right: 0;
        }
      }
    }
  }

  .arco-tabs-nav-type-line .arco-tabs-tab {
    margin: 0;
    margin-right: 24px;
    margin-left: 8px;
  }
}
</style>
